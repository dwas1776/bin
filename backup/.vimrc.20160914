""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" VUNDLE settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible              " required
filetype off                  " required
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'gmarik/Vundle.vim'    " let Vundle manage itself
" Add all your plugins below this banner
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plugin 'airblade/vim-gitgutter'
Plugin 'altercation/vim-colors-solarized'
Plugin 'jez/vim-superman'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'kien/ctrlp.vim'
" Plugin 'klen/python-mode'
Plugin 'powerline/powerline'
Plugin 'Raimondi/delimitMate'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/syntastic'
Plugin 'tomasr/molokai'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-sensible'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-scripts/a.vim'
Plugin 'xolox/vim-misc'

" Plugin 'bling/vim-airline'
" Plugin 'majutsushi/tagbar'
" Plugin 'michalbachowski/vim-wombat256mod'
" Plugin 'powerline/powerline', {'rtp': 'powerline/bindings/vim/'}
" Plugin 'vim-airline/vim-airline-themes'
" Plugin 'xolox/vim-easytags'
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Add all your Plugins above this banner
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call vundle#end()            " required
filetype plugin indent on    " required
syntax on
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Automatic reloading of .vimrc
autocmd! bufwritepost .vimrc source %

" let g:pymode_python = 'python3'

set ruler " % into file, current line, total lines, current column
set showcmd
set incsearch
set hlsearch

" Clear highlighting after last search
nnoremap <CR> :noh<CR><CR> " hit return
nnoremap <esc> :noh<return><esc>
nnoremap <esc>^[ <esc>^[]]


" toggle line numbers ctrl-N
:nmap <C-N><C-N> :set invnumber<CR>

" Showing line numbers and length
set number " show line numbers
set tw=79 " width of document (used by gd)
set nowrap " don't automatically wrap on load
set fo-=t " don't automatically wrap text when typing
set colorcolumn=80
highlight ColorColumn ctermbg=233
hi clear SignColumn

" use tab for command completion
set wildmenu
set wildmode=list:longest,full

" Rebind <Leader> key
let mapleader = '\'


""""""""""""""""""""""""""""""""""""""""
" AIRLINE/POWERLINE Fonts and colors
""""""""""""""""""""""""""""""""""""""""
set guifont=Roboto\ Mono\ Light\ for\ Powerline
let g:airline_powerline_fonts=1
let g:airline_detect_paste=1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#hunks#non_zero_only = 1
let g:Powerline_symbols = 'fancy'
set encoding=utf-8
set t_Co=256
set fillchars+=stl:\ ,stlnc:\
set term=xterm-256color
set termencoding=utf-8

" Show whitespace
" MUST be inserted BEFORE the colorscheme command
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
au InsertLeave * match ExtraWhitespace /\s\+$/
set background=dark
colorscheme solarized

" Mouse and backspace
set mouse=a " on OSX press ALT and click
set bs=2 " make backspace behave like normal again
set clipboard=unnamed


" Quick quit command
noremap <Leader>e :quit<CR> " Quit current window
noremap <Leader>E :qa!<CR> " Quit all windows
" easier moving between tabs
map <Leader>n <esc>:tabprevious<CR>
map <Leader>m <esc>:tabnext<CR>
" map sort function to a key
vnoremap <Leader>s :sort<CR>

" bind Ctrl+<movement> keys to move around the windows, instead of using Ctrl+w + <movement>
" Every unnecessary keystroke that can be saved is good for your health :)
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

" easier moving of code blocks
" Try to go into visual mode (v), thenselect several lines of code here and
" then press ``>`` several times.
vnoremap < <gv " better indentation
vnoremap > >gv " better indentation

" easier formatting of paragraphs
vmap Q gq
nmap Q gqap

" Useful settings
set history=700
set undolevels=700

" Real programmers don't use TABs but spaces
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set expandtab

" Make search case insensitive
set hlsearch
set incsearch
set ignorecase
set smartcase

" Disable stupid backup and swap files - they trigger too many events
" for file system watchers
set nobackup
set nowritebackup
set noswapfile

set laststatus=2


""""""""""""""""""""""""""""""""""""""""
" ctrlp
""""""""""""""""""""""""""""""""""""""""
" cd ~/.vim/bundle
" git clone https://github.com/kien/ctrlp.vim.git
let g:ctrlp_max_height = 30
set wildignore+=*.pyc
set wildignore+=*_build/*
set wildignore+=*/coverage/*


""""""""""""""""""""""""""""""""""""""""
" KLEN/PYTHON-MODE
""""""""""""""""""""""""""""""""""""""""
map <Leader>g :call RopeGotoDefinition()<CR>
" turn off auto complete
" let g:pymode_rope_completion = 0
" let g:pymode_rope_complete_on_dot = 0

let ropevim_enable_shortcuts = 1
" let g:pymode_rope_goto_def_newwin = vnew
let g:pymode_rope_extended_complete = 1
let g:pymode_breakpoint = 0
let g:pymode_syntax = 1
let g:pymode_syntax_builtin_objs = 0
let g:pymode_syntax_builtin_funcs = 0
let g:pymode_rope_lookup_project = 0
map <Leader>b Oimport ipdb; ipdb.set_trace() # BREAKPOINT<C-c>


""""""""""""""""""""""""""""""""""""""""
"  NERDTree
""""""""""""""""""""""""""""""""""""""""
" open nerd tree when starting vim
"""autocmd vimenter * NERDTree
map <Leader>t <plug>NERDTreeTabsToggle<CR>

" move nerdtree to the right
"""let g:NERDTreeWinPos = "right"

" move to the first buffer
autocmd VimEnter * wincmd p

" open file from NERDTree will also close NERDTree
let NERDTreeQuitOnOpen = 1

" open NERDTree
" nmap <leader>nn :NERDTree<cr>


""""""""""""""""""""""""""""""""""""""""
" SCROOLOOSE/SYNTASTIC
""""""""""""""""""""""""""""""""""""""""
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_error_symbol = '✘'
let g:syntastic_warning_symbol = "▲"

augroup mySyntastic
  au!
  au FileType tex let b:syntastic_mode = "passive"
augroup END


" paste toggle
set pastetoggle=<F2>

""""""""""""""""""""""""""""""""""""""""
" Raimondi/delimitMate
""""""""""""""""""""""""""""""""""""""""
let delimitMate_expand_cr = 1
augroup mydelimitMate
  au!
  au FileType markdown let b:delimitMate_nesting_quotes = ["`"]
  au FileType python let b:delimitMate_nesting_quotes = ['"', "'"]
  au FileType tex let b:delimitMate_quotes = ""
  au FileType tex let b:delimitMate_matchpairs = "(:),[:],{:},`:'"
augroup END

""""""""""""""""""""""""""""""""""""""""
" disable arrow keys to break bad habbits
""""""""""""""""""""""""""""""""""""""""
nnoremap <Left> :echo "use b^h to move back (left)"<CR>
nnoremap <Down> :echo "use J key to move down"<CR>
nnoremap <Up> :echo "use K key to move up"<CR>
nnoremap <Right> :echo "use $wel to move right"<CR>


" Better navigating through omnicomplete option list
" See http://stackoverflow.com/questions/2170023/how-to-map-keys-for-popup-menu-in-vim
set completeopt=longest,menuone
function! OmniPopup(action)
  if pumvisible()
    if a:action == 'j'
      return "\<C-N>"
    elseif a:action == 'k'
      return "\<C-P>"
    endif
  endif
  return a:action
endfunction

inoremap <silent><C-j> <C-R>=OmniPopup('j')<CR>
inoremap <silent><C-k> <C-R>=OmniPopup('k')<CR>


""""""""""""""""""""""""""""""""""""""""
" Python folding
""""""""""""""""""""""""""""""""""""""""
" mkdir -p ~/.vim/ftplugin
" wget -O ~/.vim/ftplugin/python_editing.vim http://www.vim.org/scripts/download_script.php?src_id=5492
" set nofoldenable

" Neocomplete
" let g:neocomplete#enable_at_startup = 1
